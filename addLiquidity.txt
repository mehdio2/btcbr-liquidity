<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Connect Trust Wallet & Add Liquidity</title>
<script src="https://cdn.jsdelivr.net/npm/web3@1.10.0/dist/web3.min.js"></script>
</head>
<body>
<h2>اتصال به Trust Wallet و افزودن نقدینگی</h2>
<button id="connectButton">Connect to Trust Wallet</button>
<p id="status">وضعیت: متصل نیست</p>

<hr />

<div id="liquiditySection" style="display:none;">
  <label>آدرس توکن ERC20 (مثلاً BTCBR):</label><br/>
  <input type="text" id="tokenAddress" size="50" placeholder="0x..." /><br/><br/>

  <label>مقدار توکن برای افزودن نقدینگی (به واحد توکن):</label><br/>
  <input type="text" id="tokenAmount" placeholder="مثلاً 1000" /><br/><br/>

  <label>مقدار BNB برای افزودن نقدینگی (مثلاً 0.01):</label><br/>
  <input type="text" id="bnbAmount" placeholder="مثلاً 0.01" /><br/><br/>

  <button id="addLiquidityBtn">افزودن نقدینگی</button>
  <p id="txStatus"></p>
</div>

<script>
  let web3;
  let userAccount;

  async function connectWallet() {
    if (window.ethereum) {
      try {
        // درخواست اتصال به ولت
        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
        userAccount = accounts[0];
        document.getElementById('status').innerText = "متصل به: " + userAccount;
        document.getElementById('connectButton').style.display = 'none';
        document.getElementById('liquiditySection').style.display = 'block';

        web3 = new Web3(window.ethereum);
      } catch (error) {
        alert('خطا در اتصال ولت: ' + error.message);
      }
    } else {
      alert('لطفاً Trust Wallet یا هر والت Web3 پشتیبانی شده را نصب و فعال کنید.');
    }
  }

  document.getElementById('connectButton').addEventListener('click', connectWallet);

  // ABI قرارداد Pancake Router (نسخه خلاصه‌شده برای تابع addLiquidityETH)
  const routerABI = [
    {
      "inputs": [
        { "internalType": "address", "name": "token", "type": "address" },
        { "internalType": "uint256", "name": "amountTokenDesired", "type": "uint256" },
        { "internalType": "uint256", "name": "amountTokenMin", "type": "uint256" },
        { "internalType": "uint256", "name": "amountETHMin", "type": "uint256" },
        { "internalType": "address", "name": "to", "type": "address" },
        { "internalType": "uint256", "name": "deadline", "type": "uint256" }
      ],
      "name": "addLiquidityETH",
      "outputs": [
        { "internalType": "uint256", "name": "amountToken", "type": "uint256" },
        { "internalType": "uint256", "name": "amountETH", "type": "uint256" },
        { "internalType": "uint256", "name": "liquidity", "type": "uint256" }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ];

  // آدرس PancakeSwap Router اصلی شبکه BSC
  const routerAddress = "0x10ED43C718714eb63d5aA57B78B54704E256024E";

  async function addLiquidity() {
    const tokenAddress = document.getElementById('tokenAddress').value.trim();
    const tokenAmountInput = document.getElementById('tokenAmount').value.trim();
    const bnbAmountInput = document.getElementById('bnbAmount').value.trim();

    if (!web3.utils.isAddress(tokenAddress)) {
      alert('آدرس توکن معتبر نیست.');
      return;
    }
    if (isNaN(tokenAmountInput) || Number(tokenAmountInput) <= 0) {
      alert('مقدار توکن معتبر نیست.');
      return;
    }
    if (isNaN(bnbAmountInput) || Number(bnbAmountInput) <= 0) {
      alert('مقدار BNB معتبر نیست.');
      return;
    }

    const routerContract = new web3.eth.Contract(routerABI, routerAddress);

    // تبدیل مقادیر ورودی به واحد Wei
    const decimals = 18; // بیشتر توکن‌ها 18 رقم اعشار دارند، اگر توکن متفاوت بود باید اصلاح شود
    const amountTokenDesired = web3.utils.toBN(web3.utils.toWei(tokenAmountInput, 'ether'));
    const amountTokenMin = amountTokenDesired.mul(web3.utils.toBN(95)).div(web3.utils.toBN(100)); // حداقل 95%
    const amountETHMin = web3.utils.toBN(web3.utils.toWei(bnbAmountInput, 'ether')).mul(web3.utils.toBN(95)).div(web3.utils.toBN(100));
    const deadline = Math.floor(Date.now() / 1000) + 60 * 20; // 20 دقیقه مهلت

    document.getElementById('txStatus').innerText = "در حال ارسال تراکنش...";

    try {
      const tx = await routerContract.methods.addLiquidityETH(
        tokenAddress,
        amountTokenDesired.toString(),
        amountTokenMin.toString(),
        amountETHMin.toString(),
        userAccount,
        deadline
      ).send({ from: userAccount, value: web3.utils.toWei(bnbAmountInput, 'ether') });

      document.getElementById('txStatus').innerText = "تراکنش با موفقیت انجام شد! Hash: " + tx.transactionHash;
    } catch (err) {
      document.getElementById('txStatus').innerText = "خطا در تراکنش: " + err.message;
    }
  }

  document.getElementById('addLiquidityBtn').addEventListener('click', addLiquidity);
</script>

</body>
</html>
